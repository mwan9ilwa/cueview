package com.example.cueview.presentation.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.cueview.presentation.screens.auth.LoginScreen
import com.example.cueview.presentation.screens.discover.DiscoverScreen
import com.example.cueview.presentation.screens.library.LibraryScreen
import com.example.cueview.presentation.screens.profile.ProfileScreen

@Composable
fun CueViewNavigation(
    navController: NavHostController = rememberNavController(),
    startDestination: String = Screen.Discover.route
) {
    NavHost(
        navController = navController,
        startDestination = startDestination
    ) {
        composable(Screen.Login.route) {
            LoginScreen(
                onNavigateToDiscover = {
                    navController.navigate(Screen.Discover.route) {
                        popUpTo(Screen.Login.route) { inclusive = true }
                    }
                }
            )
        }
        
        composable(Screen.Discover.route) {
            DiscoverScreen(
                onNavigateToShowDetails = { showId ->
                    navController.navigate(Screen.ShowDetails.createRoute(showId))
                }
            )
        }
        
        composable(Screen.Library.route) {
            LibraryScreen(
                onNavigateToShowDetails = { showId ->
                    navController.navigate(Screen.ShowDetails.createRoute(showId))
                }
            )
        }
        
        composable(Screen.Profile.route) {
            ProfileScreen(
                onNavigateToLogin = {
                    navController.navigate(Screen.Login.route) {
                        popUpTo(0) { inclusive = true }
                    }
                }
            )
        }
        
        composable(
            route = Screen.ShowDetails.route,
            arguments = Screen.ShowDetails.arguments
        ) { backStackEntry ->
            val showId = backStackEntry.arguments?.getInt("showId") ?: 0
            ShowDetailsScreen(
                showId = showId,
                onNavigateBack = {
                    navController.popBackStack()
                }
            )
        }
    }
}

// Placeholder screens - to be implemented
@Composable
private fun ShowDetailsScreen(showId: Int, onNavigateBack: () -> Unit) {
    // TODO: Implement ShowDetailsScreen
}
