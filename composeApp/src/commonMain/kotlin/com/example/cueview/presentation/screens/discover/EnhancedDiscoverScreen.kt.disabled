package com.example.cueview.presentation.screens.discover

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.cueview.domain.model.*
import com.example.cueview.presentation.viewmodel.EnhancedDiscoverViewModel
import com.example.cueview.presentation.ui.common.ContentFilter
import com.example.cueview.presentation.ui.common.SortOption
import com.example.cueview.domain.usecase.PersonalizedContent
import com.example.cueview.presentation.viewmodel.EnhancedDiscoverUiState
import org.koin.compose.koinInject

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun EnhancedDiscoverScreen(
    onNavigateToShowDetails: (Int) -> Unit,
    viewModel: EnhancedDiscoverViewModel = koinInject()
) {
    val uiState by viewModel.uiState.collectAsState()
    var searchQuery by remember { mutableStateOf("") }
    var showFilters by remember { mutableStateOf(false) }
    val snackbarHostState = remember { SnackbarHostState() }
    
    // Handle messages
    LaunchedEffect(uiState.error) {
        uiState.error?.let { message ->
            snackbarHostState.showSnackbar(
                message = message,
                duration = SnackbarDuration.Long
            )
            viewModel.clearError()
        }
    }
    
    Scaffold(
        snackbarHost = { SnackbarHost(snackbarHostState) },
        topBar = {
            TopAppBar(
                title = { Text("Discover") },
                actions = {
                    IconButton(onClick = { showFilters = !showFilters }) {
                        Icon(
                            imageVector = if (showFilters) Icons.Default.FilterListOff else Icons.Default.FilterList,
                            contentDescription = "Toggle Filters"
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            // Search Bar
            SearchBar(
                query = searchQuery,
                onQueryChange = { 
                    searchQuery = it
                    viewModel.onSearchQueryChange(it)
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            )
            
            // Filters Section
            AnimatedVisibility(
                visible = showFilters,
                enter = fadeIn(),
                exit = fadeOut()
            ) {
                FiltersSection(
                    currentFilter = uiState.contentFilter,
                    currentSort = uiState.sortOption,
                    genres = uiState.genres,
                    onFilterChange = { viewModel.onContentFilterChanged(it) },
                    onSortChange = { viewModel.onSortOptionChanged(it) }
                )
            }
            
            // Content
            when {
                uiState.isLoading -> {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        CircularProgressIndicator()
                    }
                }
                
                searchQuery.isNotBlank() -> {
                    SearchResultsContent(
                        results = uiState.searchResults,
                        onShowClick = onNavigateToShowDetails,
                        onAddToLibrary = { viewModel.addToLibrary(it) },
                        isAddingToLibrary = false
                    )
                }
                
                uiState.selectedGenre != null -> {
                    GenreContent(
                        genre = uiState.selectedGenre!!,
                        shows = uiState.selectedGenre?.let { genre ->
                            uiState.personalizedContent.byGenre[genre] ?: emptyList()
                        } ?: emptyList(),
                        onShowClick = onNavigateToShowDetails,
                        onAddToLibrary = { viewModel.addToLibrary(it) },
                        isAddingToLibrary = false
                    )
                }
                
                else -> {
                    PersonalizedContent(
                        content = uiState.personalizedContent,
                        onShowClick = onNavigateToShowDetails,
                        onAddToLibrary = { viewModel.addToLibrary(it) },
                        onGenreClick = { viewModel.onGenreSelected(it) },
                        isAddingToLibrary = false
                    )
                }
            }
        }
    }
}

@Composable
private fun SearchBar(
    query: String,
    onQueryChange: (String) -> Unit,
    modifier: Modifier = Modifier
) {
    OutlinedTextField(
        value = query,
        onValueChange = onQueryChange,
        label = { Text("Search shows...") },
        leadingIcon = {
            Icon(
                imageVector = Icons.Default.Search,
                contentDescription = "Search"
            )
        },
        trailingIcon = if (query.isNotEmpty()) {
            {
                IconButton(onClick = { onQueryChange("") }) {
                    Icon(
                        imageVector = Icons.Default.Clear,
                        contentDescription = "Clear"
                    )
                }
            }
        } else null,
        modifier = modifier,
        singleLine = true,
        shape = RoundedCornerShape(12.dp)
    )
}

@Composable
private fun FiltersSection(
    currentFilter: ContentFilter,
    currentSort: SortOption,
    genres: List<Genre>,
    onFilterChange: (ContentFilter) -> Unit,
    onSortChange: (SortOption) -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "Filters & Sorting",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Sort Options
            Text(
                text = "Sort by:",
                style = MaterialTheme.typography.labelMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            LazyRow(
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                modifier = Modifier.padding(vertical = 8.dp)
            ) {
                items(SortOption.values()) { option ->
                    FilterChip(
                        selected = currentSort == option,
                        onClick = { onSortChange(option) },
                        label = { Text(option.name.replace('_', ' ')) }
                    )
                }
            }
        }
    }
}

@Composable
private fun PersonalizedContent(
    content: com.example.cueview.presentation.viewmodel.ViewModelPersonalizedContent,
    onShowClick: (Int) -> Unit,
    onAddToLibrary: (TvShow) -> Unit,
    onGenreClick: (Genre) -> Unit,
    isAddingToLibrary: Boolean
) {
    LazyColumn(
        verticalArrangement = Arrangement.spacedBy(16.dp),
        contentPadding = PaddingValues(16.dp)
    ) {
        // Trending Section
        if (content.trending.isNotEmpty()) {
            item {
                ShowSection(
                    title = "Trending Now",
                    shows = content.trending,
                    onShowClick = onShowClick,
                    onAddToLibrary = onAddToLibrary,
                    isAddingToLibrary = isAddingToLibrary
                )
            }
        }
        
        // For You Section
        if (content.forYou.isNotEmpty()) {
            item {
                ShowSection(
                    title = "Recommended for You",
                    shows = content.forYou,
                    onShowClick = onShowClick,
                    onAddToLibrary = onAddToLibrary,
                    isAddingToLibrary = isAddingToLibrary
                )
            }
        }
        
        // Watchlist Suggestions
        if (content.watchlistSuggestions.isNotEmpty()) {
            item {
                ShowSection(
                    title = "You Might Also Like",
                    shows = content.watchlistSuggestions,
                    onShowClick = onShowClick,
                    onAddToLibrary = onAddToLibrary,
                    isAddingToLibrary = isAddingToLibrary
                )
            }
        }
        
        // Genres Section
        if (content.byGenre.isNotEmpty()) {
            item {
                GenresSection(
                    genres = content.byGenre.keys.toList(),
                    onGenreClick = onGenreClick
                )
            }
        }
    }
}

@Composable
private fun ShowSection(
    title: String,
    shows: List<TvShow>,
    onShowClick: (Int) -> Unit,
    onAddToLibrary: (TvShow) -> Unit,
    isAddingToLibrary: Boolean
) {
    Column {
        Text(
            text = title,
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 12.dp)
        )
        
        LazyRow(
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            items(shows) { show ->
                EnhancedShowCard(
                    show = show,
                    onShowClick = onShowClick,
                    onAddToLibrary = onAddToLibrary,
                    isAddingToLibrary = isAddingToLibrary,
                    modifier = Modifier.width(150.dp)
                )
            }
        }
    }
}

@Composable
private fun GenresSection(
    genres: List<Genre>,
    onGenreClick: (Genre) -> Unit
) {
    Column {
        Text(
            text = "Browse by Genre",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 12.dp)
        )
        
        LazyRow(
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(genres) { genre ->
                AssistChip(
                    onClick = { onGenreClick(genre) },
                    label = { Text(genre.name) }
                )
            }
        }
    }
}

@Composable
private fun SearchResultsContent(
    results: List<TvShow>,
    onShowClick: (Int) -> Unit,
    onAddToLibrary: (TvShow) -> Unit,
    isAddingToLibrary: Boolean
) {
    if (results.isEmpty()) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Text("No shows found")
        }
    } else {
        LazyColumn(
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(results) { show ->
                EnhancedShowCard(
                    show = show,
                    onShowClick = onShowClick,
                    onAddToLibrary = onAddToLibrary,
                    isAddingToLibrary = isAddingToLibrary,
                    modifier = Modifier.fillMaxWidth()
                )
            }
        }
    }
}

@Composable
private fun GenreContent(
    genre: Genre,
    shows: List<TvShow>,
    onShowClick: (Int) -> Unit,
    onAddToLibrary: (TvShow) -> Unit,
    isAddingToLibrary: Boolean
) {
    LazyColumn(
        contentPadding = PaddingValues(16.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        item {
            Text(
                text = "${genre.name} Shows",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }
        
        items(shows) { show ->
            EnhancedShowCard(
                show = show,
                onShowClick = onShowClick,
                onAddToLibrary = onAddToLibrary,
                isAddingToLibrary = isAddingToLibrary,
                modifier = Modifier.fillMaxWidth()
            )
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun EnhancedShowCard(
    show: TvShow,
    onShowClick: (Int) -> Unit,
    onAddToLibrary: (TvShow) -> Unit,
    isAddingToLibrary: Boolean,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier,
        onClick = { onShowClick(show.id) }
    ) {
        Column {
            // Poster placeholder
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp)
                    .clip(RoundedCornerShape(topStart = 12.dp, topEnd = 12.dp)),
                contentAlignment = Alignment.Center
            ) {
                Text("📺", fontSize = 48.sp)
            }
            
            Column(
                modifier = Modifier.padding(12.dp)
            ) {
                Text(
                    text = show.name,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )
                
                Spacer(modifier = Modifier.height(4.dp))
                
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        imageVector = Icons.Default.Star,
                        contentDescription = "Rating",
                        tint = Color(0xFFFFD700),
                        modifier = Modifier.size(16.dp)
                    )
                    Text(
                        text = " ${(show.voteAverage * 10).toInt() / 10.0}",
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    
                    Spacer(modifier = Modifier.weight(1f))
                    
                    if (isAddingToLibrary) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(20.dp),
                            strokeWidth = 2.dp
                        )
                    } else {
                        IconButton(
                            onClick = { onAddToLibrary(show) },
                            modifier = Modifier.size(32.dp)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Add,
                                contentDescription = "Add to Library",
                                modifier = Modifier.size(20.dp)
                            )
                        }
                    }
                }
            }
        }
    }
}
